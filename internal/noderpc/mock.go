// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=mock.go -package=noderpc -typed
//

// Package noderpc is a generated GoMock package.
package noderpc

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockINode is a mock of INode interface.
type MockINode struct {
	ctrl     *gomock.Controller
	recorder *MockINodeMockRecorder
	isgomock struct{}
}

// MockINodeMockRecorder is the mock recorder for MockINode.
type MockINodeMockRecorder struct {
	mock *MockINode
}

// NewMockINode creates a new mock instance.
func NewMockINode(ctrl *gomock.Controller) *MockINode {
	mock := &MockINode{ctrl: ctrl}
	mock.recorder = &MockINodeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockINode) EXPECT() *MockINodeMockRecorder {
	return m.recorder
}

// Block mocks base method.
func (m *MockINode) Block(arg0 context.Context, arg1 int64) (Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Block", arg0, arg1)
	ret0, _ := ret[0].(Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Block indicates an expected call of Block.
func (mr *MockINodeMockRecorder) Block(arg0, arg1 any) *MockINodeBlockCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Block", reflect.TypeOf((*MockINode)(nil).Block), arg0, arg1)
	return &MockINodeBlockCall{Call: call}
}

// MockINodeBlockCall wrap *gomock.Call
type MockINodeBlockCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockINodeBlockCall) Return(arg0 Block, arg1 error) *MockINodeBlockCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockINodeBlockCall) Do(f func(context.Context, int64) (Block, error)) *MockINodeBlockCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockINodeBlockCall) DoAndReturn(f func(context.Context, int64) (Block, error)) *MockINodeBlockCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// BlockHash mocks base method.
func (m *MockINode) BlockHash(arg0 context.Context, arg1 int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockHash", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockHash indicates an expected call of BlockHash.
func (mr *MockINodeMockRecorder) BlockHash(arg0, arg1 any) *MockINodeBlockHashCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockHash", reflect.TypeOf((*MockINode)(nil).BlockHash), arg0, arg1)
	return &MockINodeBlockHashCall{Call: call}
}

// MockINodeBlockHashCall wrap *gomock.Call
type MockINodeBlockHashCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockINodeBlockHashCall) Return(arg0 string, arg1 error) *MockINodeBlockHashCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockINodeBlockHashCall) Do(f func(context.Context, int64) (string, error)) *MockINodeBlockHashCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockINodeBlockHashCall) DoAndReturn(f func(context.Context, int64) (string, error)) *MockINodeBlockHashCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetBigMapType mocks base method.
func (m *MockINode) GetBigMapType(ctx context.Context, ptr, level int64) (BigMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBigMapType", ctx, ptr, level)
	ret0, _ := ret[0].(BigMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBigMapType indicates an expected call of GetBigMapType.
func (mr *MockINodeMockRecorder) GetBigMapType(ctx, ptr, level any) *MockINodeGetBigMapTypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBigMapType", reflect.TypeOf((*MockINode)(nil).GetBigMapType), ctx, ptr, level)
	return &MockINodeGetBigMapTypeCall{Call: call}
}

// MockINodeGetBigMapTypeCall wrap *gomock.Call
type MockINodeGetBigMapTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockINodeGetBigMapTypeCall) Return(arg0 BigMap, arg1 error) *MockINodeGetBigMapTypeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockINodeGetBigMapTypeCall) Do(f func(context.Context, int64, int64) (BigMap, error)) *MockINodeGetBigMapTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockINodeGetBigMapTypeCall) DoAndReturn(f func(context.Context, int64, int64) (BigMap, error)) *MockINodeGetBigMapTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetBlockMetadata mocks base method.
func (m *MockINode) GetBlockMetadata(ctx context.Context, level int64) (Metadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockMetadata", ctx, level)
	ret0, _ := ret[0].(Metadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockMetadata indicates an expected call of GetBlockMetadata.
func (mr *MockINodeMockRecorder) GetBlockMetadata(ctx, level any) *MockINodeGetBlockMetadataCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockMetadata", reflect.TypeOf((*MockINode)(nil).GetBlockMetadata), ctx, level)
	return &MockINodeGetBlockMetadataCall{Call: call}
}

// MockINodeGetBlockMetadataCall wrap *gomock.Call
type MockINodeGetBlockMetadataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockINodeGetBlockMetadataCall) Return(metadata Metadata, err error) *MockINodeGetBlockMetadataCall {
	c.Call = c.Call.Return(metadata, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockINodeGetBlockMetadataCall) Do(f func(context.Context, int64) (Metadata, error)) *MockINodeGetBlockMetadataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockINodeGetBlockMetadataCall) DoAndReturn(f func(context.Context, int64) (Metadata, error)) *MockINodeGetBlockMetadataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetContractBalance mocks base method.
func (m *MockINode) GetContractBalance(arg0 context.Context, arg1 string, arg2 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractBalance", arg0, arg1, arg2)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractBalance indicates an expected call of GetContractBalance.
func (mr *MockINodeMockRecorder) GetContractBalance(arg0, arg1, arg2 any) *MockINodeGetContractBalanceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractBalance", reflect.TypeOf((*MockINode)(nil).GetContractBalance), arg0, arg1, arg2)
	return &MockINodeGetContractBalanceCall{Call: call}
}

// MockINodeGetContractBalanceCall wrap *gomock.Call
type MockINodeGetContractBalanceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockINodeGetContractBalanceCall) Return(arg0 int64, arg1 error) *MockINodeGetContractBalanceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockINodeGetContractBalanceCall) Do(f func(context.Context, string, int64) (int64, error)) *MockINodeGetContractBalanceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockINodeGetContractBalanceCall) DoAndReturn(f func(context.Context, string, int64) (int64, error)) *MockINodeGetContractBalanceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetContractData mocks base method.
func (m *MockINode) GetContractData(arg0 context.Context, arg1 string, arg2 int64) (ContractData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractData", arg0, arg1, arg2)
	ret0, _ := ret[0].(ContractData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractData indicates an expected call of GetContractData.
func (mr *MockINodeMockRecorder) GetContractData(arg0, arg1, arg2 any) *MockINodeGetContractDataCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractData", reflect.TypeOf((*MockINode)(nil).GetContractData), arg0, arg1, arg2)
	return &MockINodeGetContractDataCall{Call: call}
}

// MockINodeGetContractDataCall wrap *gomock.Call
type MockINodeGetContractDataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockINodeGetContractDataCall) Return(arg0 ContractData, arg1 error) *MockINodeGetContractDataCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockINodeGetContractDataCall) Do(f func(context.Context, string, int64) (ContractData, error)) *MockINodeGetContractDataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockINodeGetContractDataCall) DoAndReturn(f func(context.Context, string, int64) (ContractData, error)) *MockINodeGetContractDataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetContractsByBlock mocks base method.
func (m *MockINode) GetContractsByBlock(arg0 context.Context, arg1 int64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractsByBlock", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractsByBlock indicates an expected call of GetContractsByBlock.
func (mr *MockINodeMockRecorder) GetContractsByBlock(arg0, arg1 any) *MockINodeGetContractsByBlockCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractsByBlock", reflect.TypeOf((*MockINode)(nil).GetContractsByBlock), arg0, arg1)
	return &MockINodeGetContractsByBlockCall{Call: call}
}

// MockINodeGetContractsByBlockCall wrap *gomock.Call
type MockINodeGetContractsByBlockCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockINodeGetContractsByBlockCall) Return(arg0 []string, arg1 error) *MockINodeGetContractsByBlockCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockINodeGetContractsByBlockCall) Do(f func(context.Context, int64) ([]string, error)) *MockINodeGetContractsByBlockCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockINodeGetContractsByBlockCall) DoAndReturn(f func(context.Context, int64) ([]string, error)) *MockINodeGetContractsByBlockCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCounter mocks base method.
func (m *MockINode) GetCounter(arg0 context.Context, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCounter", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCounter indicates an expected call of GetCounter.
func (mr *MockINodeMockRecorder) GetCounter(arg0, arg1 any) *MockINodeGetCounterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCounter", reflect.TypeOf((*MockINode)(nil).GetCounter), arg0, arg1)
	return &MockINodeGetCounterCall{Call: call}
}

// MockINodeGetCounterCall wrap *gomock.Call
type MockINodeGetCounterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockINodeGetCounterCall) Return(arg0 int64, arg1 error) *MockINodeGetCounterCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockINodeGetCounterCall) Do(f func(context.Context, string) (int64, error)) *MockINodeGetCounterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockINodeGetCounterCall) DoAndReturn(f func(context.Context, string) (int64, error)) *MockINodeGetCounterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetHead mocks base method.
func (m *MockINode) GetHead(arg0 context.Context) (Header, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHead", arg0)
	ret0, _ := ret[0].(Header)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHead indicates an expected call of GetHead.
func (mr *MockINodeMockRecorder) GetHead(arg0 any) *MockINodeGetHeadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHead", reflect.TypeOf((*MockINode)(nil).GetHead), arg0)
	return &MockINodeGetHeadCall{Call: call}
}

// MockINodeGetHeadCall wrap *gomock.Call
type MockINodeGetHeadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockINodeGetHeadCall) Return(arg0 Header, arg1 error) *MockINodeGetHeadCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockINodeGetHeadCall) Do(f func(context.Context) (Header, error)) *MockINodeGetHeadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockINodeGetHeadCall) DoAndReturn(f func(context.Context) (Header, error)) *MockINodeGetHeadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetHeader mocks base method.
func (m *MockINode) GetHeader(arg0 context.Context, arg1 int64) (Header, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeader", arg0, arg1)
	ret0, _ := ret[0].(Header)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHeader indicates an expected call of GetHeader.
func (mr *MockINodeMockRecorder) GetHeader(arg0, arg1 any) *MockINodeGetHeaderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeader", reflect.TypeOf((*MockINode)(nil).GetHeader), arg0, arg1)
	return &MockINodeGetHeaderCall{Call: call}
}

// MockINodeGetHeaderCall wrap *gomock.Call
type MockINodeGetHeaderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockINodeGetHeaderCall) Return(arg0 Header, arg1 error) *MockINodeGetHeaderCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockINodeGetHeaderCall) Do(f func(context.Context, int64) (Header, error)) *MockINodeGetHeaderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockINodeGetHeaderCall) DoAndReturn(f func(context.Context, int64) (Header, error)) *MockINodeGetHeaderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetLevel mocks base method.
func (m *MockINode) GetLevel(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLevel", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLevel indicates an expected call of GetLevel.
func (mr *MockINodeMockRecorder) GetLevel(ctx any) *MockINodeGetLevelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLevel", reflect.TypeOf((*MockINode)(nil).GetLevel), ctx)
	return &MockINodeGetLevelCall{Call: call}
}

// MockINodeGetLevelCall wrap *gomock.Call
type MockINodeGetLevelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockINodeGetLevelCall) Return(arg0 int64, arg1 error) *MockINodeGetLevelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockINodeGetLevelCall) Do(f func(context.Context) (int64, error)) *MockINodeGetLevelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockINodeGetLevelCall) DoAndReturn(f func(context.Context) (int64, error)) *MockINodeGetLevelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetLightOPG mocks base method.
func (m *MockINode) GetLightOPG(ctx context.Context, block int64) ([]LightOperationGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLightOPG", ctx, block)
	ret0, _ := ret[0].([]LightOperationGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLightOPG indicates an expected call of GetLightOPG.
func (mr *MockINodeMockRecorder) GetLightOPG(ctx, block any) *MockINodeGetLightOPGCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLightOPG", reflect.TypeOf((*MockINode)(nil).GetLightOPG), ctx, block)
	return &MockINodeGetLightOPGCall{Call: call}
}

// MockINodeGetLightOPGCall wrap *gomock.Call
type MockINodeGetLightOPGCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockINodeGetLightOPGCall) Return(arg0 []LightOperationGroup, arg1 error) *MockINodeGetLightOPGCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockINodeGetLightOPGCall) Do(f func(context.Context, int64) ([]LightOperationGroup, error)) *MockINodeGetLightOPGCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockINodeGetLightOPGCall) DoAndReturn(f func(context.Context, int64) ([]LightOperationGroup, error)) *MockINodeGetLightOPGCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetNetworkConstants mocks base method.
func (m *MockINode) GetNetworkConstants(arg0 context.Context, arg1 int64) (Constants, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkConstants", arg0, arg1)
	ret0, _ := ret[0].(Constants)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkConstants indicates an expected call of GetNetworkConstants.
func (mr *MockINodeMockRecorder) GetNetworkConstants(arg0, arg1 any) *MockINodeGetNetworkConstantsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkConstants", reflect.TypeOf((*MockINode)(nil).GetNetworkConstants), arg0, arg1)
	return &MockINodeGetNetworkConstantsCall{Call: call}
}

// MockINodeGetNetworkConstantsCall wrap *gomock.Call
type MockINodeGetNetworkConstantsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockINodeGetNetworkConstantsCall) Return(arg0 Constants, arg1 error) *MockINodeGetNetworkConstantsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockINodeGetNetworkConstantsCall) Do(f func(context.Context, int64) (Constants, error)) *MockINodeGetNetworkConstantsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockINodeGetNetworkConstantsCall) DoAndReturn(f func(context.Context, int64) (Constants, error)) *MockINodeGetNetworkConstantsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOPG mocks base method.
func (m *MockINode) GetOPG(ctx context.Context, block int64) ([]OperationGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOPG", ctx, block)
	ret0, _ := ret[0].([]OperationGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOPG indicates an expected call of GetOPG.
func (mr *MockINodeMockRecorder) GetOPG(ctx, block any) *MockINodeGetOPGCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOPG", reflect.TypeOf((*MockINode)(nil).GetOPG), ctx, block)
	return &MockINodeGetOPGCall{Call: call}
}

// MockINodeGetOPGCall wrap *gomock.Call
type MockINodeGetOPGCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockINodeGetOPGCall) Return(arg0 []OperationGroup, arg1 error) *MockINodeGetOPGCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockINodeGetOPGCall) Do(f func(context.Context, int64) ([]OperationGroup, error)) *MockINodeGetOPGCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockINodeGetOPGCall) DoAndReturn(f func(context.Context, int64) ([]OperationGroup, error)) *MockINodeGetOPGCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRawScript mocks base method.
func (m *MockINode) GetRawScript(ctx context.Context, address string, level int64) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRawScript", ctx, address, level)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRawScript indicates an expected call of GetRawScript.
func (mr *MockINodeMockRecorder) GetRawScript(ctx, address, level any) *MockINodeGetRawScriptCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRawScript", reflect.TypeOf((*MockINode)(nil).GetRawScript), ctx, address, level)
	return &MockINodeGetRawScriptCall{Call: call}
}

// MockINodeGetRawScriptCall wrap *gomock.Call
type MockINodeGetRawScriptCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockINodeGetRawScriptCall) Return(arg0 []byte, arg1 error) *MockINodeGetRawScriptCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockINodeGetRawScriptCall) Do(f func(context.Context, string, int64) ([]byte, error)) *MockINodeGetRawScriptCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockINodeGetRawScriptCall) DoAndReturn(f func(context.Context, string, int64) ([]byte, error)) *MockINodeGetRawScriptCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetScriptJSON mocks base method.
func (m *MockINode) GetScriptJSON(arg0 context.Context, arg1 string, arg2 int64) (Script, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScriptJSON", arg0, arg1, arg2)
	ret0, _ := ret[0].(Script)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScriptJSON indicates an expected call of GetScriptJSON.
func (mr *MockINodeMockRecorder) GetScriptJSON(arg0, arg1, arg2 any) *MockINodeGetScriptJSONCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScriptJSON", reflect.TypeOf((*MockINode)(nil).GetScriptJSON), arg0, arg1, arg2)
	return &MockINodeGetScriptJSONCall{Call: call}
}

// MockINodeGetScriptJSONCall wrap *gomock.Call
type MockINodeGetScriptJSONCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockINodeGetScriptJSONCall) Return(arg0 Script, arg1 error) *MockINodeGetScriptJSONCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockINodeGetScriptJSONCall) Do(f func(context.Context, string, int64) (Script, error)) *MockINodeGetScriptJSONCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockINodeGetScriptJSONCall) DoAndReturn(f func(context.Context, string, int64) (Script, error)) *MockINodeGetScriptJSONCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetScriptStorageRaw mocks base method.
func (m *MockINode) GetScriptStorageRaw(arg0 context.Context, arg1 string, arg2 int64) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScriptStorageRaw", arg0, arg1, arg2)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScriptStorageRaw indicates an expected call of GetScriptStorageRaw.
func (mr *MockINodeMockRecorder) GetScriptStorageRaw(arg0, arg1, arg2 any) *MockINodeGetScriptStorageRawCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScriptStorageRaw", reflect.TypeOf((*MockINode)(nil).GetScriptStorageRaw), arg0, arg1, arg2)
	return &MockINodeGetScriptStorageRawCall{Call: call}
}

// MockINodeGetScriptStorageRawCall wrap *gomock.Call
type MockINodeGetScriptStorageRawCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockINodeGetScriptStorageRawCall) Return(arg0 []byte, arg1 error) *MockINodeGetScriptStorageRawCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockINodeGetScriptStorageRawCall) Do(f func(context.Context, string, int64) ([]byte, error)) *MockINodeGetScriptStorageRawCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockINodeGetScriptStorageRawCall) DoAndReturn(f func(context.Context, string, int64) ([]byte, error)) *MockINodeGetScriptStorageRawCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetStorage mocks base method.
func (m *MockINode) GetStorage(ctx context.Context, level int64, address string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorage", ctx, level, address)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorage indicates an expected call of GetStorage.
func (mr *MockINodeMockRecorder) GetStorage(ctx, level, address any) *MockINodeGetStorageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorage", reflect.TypeOf((*MockINode)(nil).GetStorage), ctx, level, address)
	return &MockINodeGetStorageCall{Call: call}
}

// MockINodeGetStorageCall wrap *gomock.Call
type MockINodeGetStorageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockINodeGetStorageCall) Return(arg0 []byte, arg1 error) *MockINodeGetStorageCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockINodeGetStorageCall) Do(f func(context.Context, int64, string) ([]byte, error)) *MockINodeGetStorageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockINodeGetStorageCall) DoAndReturn(f func(context.Context, int64, string) ([]byte, error)) *MockINodeGetStorageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RunCode mocks base method.
func (m *MockINode) RunCode(arg0 context.Context, arg1, arg2, arg3 []byte, arg4, arg5, arg6, arg7, arg8 string, arg9, arg10 int64) (RunCodeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunCode", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
	ret0, _ := ret[0].(RunCodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunCode indicates an expected call of RunCode.
func (mr *MockINodeMockRecorder) RunCode(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10 any) *MockINodeRunCodeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunCode", reflect.TypeOf((*MockINode)(nil).RunCode), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
	return &MockINodeRunCodeCall{Call: call}
}

// MockINodeRunCodeCall wrap *gomock.Call
type MockINodeRunCodeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockINodeRunCodeCall) Return(arg0 RunCodeResponse, arg1 error) *MockINodeRunCodeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockINodeRunCodeCall) Do(f func(context.Context, []byte, []byte, []byte, string, string, string, string, string, int64, int64) (RunCodeResponse, error)) *MockINodeRunCodeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockINodeRunCodeCall) DoAndReturn(f func(context.Context, []byte, []byte, []byte, string, string, string, string, string, int64, int64) (RunCodeResponse, error)) *MockINodeRunCodeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RunOperation mocks base method.
func (m *MockINode) RunOperation(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5, arg6, arg7, arg8, arg9 int64, arg10 []byte) (OperationGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunOperation", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
	ret0, _ := ret[0].(OperationGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunOperation indicates an expected call of RunOperation.
func (mr *MockINodeMockRecorder) RunOperation(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10 any) *MockINodeRunOperationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunOperation", reflect.TypeOf((*MockINode)(nil).RunOperation), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
	return &MockINodeRunOperationCall{Call: call}
}

// MockINodeRunOperationCall wrap *gomock.Call
type MockINodeRunOperationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockINodeRunOperationCall) Return(arg0 OperationGroup, arg1 error) *MockINodeRunOperationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockINodeRunOperationCall) Do(f func(context.Context, string, string, string, string, int64, int64, int64, int64, int64, []byte) (OperationGroup, error)) *MockINodeRunOperationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockINodeRunOperationCall) DoAndReturn(f func(context.Context, string, string, string, string, int64, int64, int64, int64, int64, []byte) (OperationGroup, error)) *MockINodeRunOperationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RunOperationLight mocks base method.
func (m *MockINode) RunOperationLight(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5, arg6, arg7, arg8, arg9 int64, arg10 []byte) (LightOperationGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunOperationLight", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
	ret0, _ := ret[0].(LightOperationGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunOperationLight indicates an expected call of RunOperationLight.
func (mr *MockINodeMockRecorder) RunOperationLight(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10 any) *MockINodeRunOperationLightCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunOperationLight", reflect.TypeOf((*MockINode)(nil).RunOperationLight), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
	return &MockINodeRunOperationLightCall{Call: call}
}

// MockINodeRunOperationLightCall wrap *gomock.Call
type MockINodeRunOperationLightCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockINodeRunOperationLightCall) Return(arg0 LightOperationGroup, arg1 error) *MockINodeRunOperationLightCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockINodeRunOperationLightCall) Do(f func(context.Context, string, string, string, string, int64, int64, int64, int64, int64, []byte) (LightOperationGroup, error)) *MockINodeRunOperationLightCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockINodeRunOperationLightCall) DoAndReturn(f func(context.Context, string, string, string, string, int64, int64, int64, int64, int64, []byte) (LightOperationGroup, error)) *MockINodeRunOperationLightCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RunScriptView mocks base method.
func (m *MockINode) RunScriptView(ctx context.Context, request RunScriptViewRequest) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunScriptView", ctx, request)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunScriptView indicates an expected call of RunScriptView.
func (mr *MockINodeMockRecorder) RunScriptView(ctx, request any) *MockINodeRunScriptViewCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunScriptView", reflect.TypeOf((*MockINode)(nil).RunScriptView), ctx, request)
	return &MockINodeRunScriptViewCall{Call: call}
}

// MockINodeRunScriptViewCall wrap *gomock.Call
type MockINodeRunScriptViewCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockINodeRunScriptViewCall) Return(arg0 []byte, arg1 error) *MockINodeRunScriptViewCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockINodeRunScriptViewCall) Do(f func(context.Context, RunScriptViewRequest) ([]byte, error)) *MockINodeRunScriptViewCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockINodeRunScriptViewCall) DoAndReturn(f func(context.Context, RunScriptViewRequest) ([]byte, error)) *MockINodeRunScriptViewCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
